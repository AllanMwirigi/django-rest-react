{"version":3,"sources":["App.js","SignIn.js","serviceWorker.js","index.js"],"names":["App","props","handleReqErrors","error","response","status","alert","sessionStorage","removeItem","sessionExpired","state","todoList","activeItem","id","title","completed","editing","fetchTasks","bind","handleChange","handleSubmit","getCookie","startEdit","deleteItem","strikeUnstrike","accessToken","getItem","baseUrl","process","name","cookieValue","document","cookie","cookies","split","i","length","trim","substring","decodeURIComponent","this","axios","get","headers","setState","data","e","value","target","preventDefault","csrftoken","url","config","post","task","delete","body","tasks","self","className","onSubmit","style","flex","onChange","type","placeholder","map","index","key","onClick","React","Component","SignIn","login","a","emailInput","passInput","displayLoading","email","password","setItem","access","refresh","signedIn","renderLogin","border","paddingBottom","htmlFor","required","role","Boolean","window","location","hostname","match","ReactDOM","render","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","console","message"],"mappings":"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","file":"static/js/main.047089f7.chunk.js","sourcesContent":["import React from 'react';\nimport './App.css';\nimport axios from 'axios';\n\n\nclass App extends React.Component {\n  constructor(props){\n    super(props);\n    this.state = {\n      todoList:[],\n      activeItem:{\n        id:null, \n        title:'',\n        completed:false,\n      },\n      editing:false,\n    }\n    this.fetchTasks = this.fetchTasks.bind(this)\n    this.handleChange = this.handleChange.bind(this)\n    this.handleSubmit = this.handleSubmit.bind(this)\n    this.getCookie = this.getCookie.bind(this)\n    this.startEdit = this.startEdit.bind(this)\n    this.deleteItem = this.deleteItem.bind(this)\n    this.strikeUnstrike = this.strikeUnstrike.bind(this)\n    this.accessToken = sessionStorage.getItem('authToken')\n    if(process.env.REACT_APP_ENV === 'production'){\n      this.baseUrl = process.env.REACT_APP_PROD_URL;\n    }\n    if(process.env.REACT_APP_ENV === 'development'){\n      this.baseUrl = process.env.REACT_APP_DEV_URL;\n    }\n  }\n\n  getCookie(name) {\n    var cookieValue = null;\n    if (document.cookie && document.cookie !== '') {\n        var cookies = document.cookie.split(';');\n        for (var i = 0; i < cookies.length; i++) {\n            var cookie = cookies[i].trim();\n            // Does this cookie string begin with the name we want?\n            if (cookie.substring(0, name.length + 1) === (name + '=')) {\n                cookieValue = decodeURIComponent(cookie.substring(name.length + 1));\n                break;\n            }\n        }\n    }\n    return cookieValue;\n  }\n\n  async componentDidMount(){\n    await this.fetchTasks()\n  }\n\n  async fetchTasks(){\n\n    try {\n      const response = await axios.get(`${this.baseUrl}/v1/task-list/`, { headers:{ 'Authorization': `Bearer ${this.accessToken}` }});\n      this.setState({ todoList: response.data })\n    } catch(error) {\n      this.handleReqErrors(error);\n    }\n\n    // fetch('http://127.0.0.1:8000/api/v1/task-list/', {\n    //   method:'GET',\n    //   headers:{ 'Authorization': `Bearer ${this.accessToken}` }\n    // }).then(response => response.json())\n    // .then(data => {\n    //   this.setState({\n    //     todoList:data\n    //   })\n    // }).catch(error => {})\n  }\n\n  handleReqErrors = (error) => {\n    if(error.response){\n      if(error.response.status === 401){\n        const msg = 'Session expired\\nKindly login again';\n        alert(msg);\n        sessionStorage.removeItem('authToken');\n        this.props.sessionExpired()\n      }else{\n        alert('Server Error');     \n      }\n    }else{\n      alert('Server Error');         \n    }\n  }\n\n  handleChange(e){\n    var value = e.target.value\n\n    this.setState({\n      activeItem:{\n        ...this.state.activeItem,\n        title:value\n      }\n    })\n  }\n\n  async handleSubmit(e){\n    e.preventDefault()\n\n    var csrftoken = this.getCookie('csrftoken')\n\n    var url = `${this.baseUrl}/v1/task-create/`\n\n    if(this.state.editing === true){\n      url = `${this.baseUrl}/v1/task-update/${ this.state.activeItem.id}/`\n      this.setState({\n        editing:false\n      })\n    }\n\n    const config = {\n      headers:{\n        'Content-type':'application/json',\n        'X-CSRFToken':csrftoken,\n        'Authorization': `Bearer ${this.accessToken}`\n      },\n    }\n\n    try {\n      const response = await axios.post(url, this.state.activeItem, config);\n      await this.fetchTasks();\n      this.setState({\n        activeItem:{\n          id:null, \n          title:'',\n          completed:false,\n        }\n      });\n    } catch(error) {\n      this.handleReqErrors(error);\n    }\n\n    // fetch(url, {\n    //   method:'POST',\n    //   headers:{\n    //     'Content-type':'application/json',\n    //     'X-CSRFToken':csrftoken,\n    //     'Authorization': `Bearer ${this.accessToken}`\n    //   },\n    //   body:JSON.stringify(this.state.activeItem)\n    // }).then((response)  => {\n    //     this.fetchTasks()\n    //     this.setState({\n    //        activeItem:{\n    //       id:null, \n    //       title:'',\n    //       completed:false,\n    //     }\n    //     })\n    // }).catch(function(error){\n    //   console.log('ERROR:', error)\n    // })\n\n  }\n\n  startEdit(task){\n    this.setState({\n      activeItem:task,\n      editing:true,\n    })\n  }\n\n\n  async deleteItem(task){\n    var csrftoken = this.getCookie('csrftoken')\n\n    const config = {\n      headers:{\n        'Content-type':'application/json',\n        'X-CSRFToken':csrftoken,\n        'Authorization': `Bearer ${this.accessToken}`\n      },\n    }\n\n    try {\n      const response = await axios.delete(`${this.baseUrl}/v1/task-delete/${task.id}/`, config);\n      await this.fetchTasks();\n    } catch(error) {\n      this.handleReqErrors(error);\n    }\n\n    // fetch(`${this.baseUrl}/v1/task-delete/${task.id}/`, {\n    //   method:'DELETE',\n    //   headers:{\n    //     'Content-type':'application/json',\n    //     'X-CSRFToken':csrftoken,\n    //     'Authorization': `Bearer ${this.accessToken}`,\n    //   },\n    // }).then((response) =>{\n\n    //   this.fetchTasks()\n    // })\n  }\n\n\n  async strikeUnstrike(task){\n\n    task.completed = !task.completed\n    var csrftoken = this.getCookie('csrftoken')\n    var url = `${this.baseUrl}/v1/task-update/${task.id}/`;\n\n    const config = {\n      headers:{\n        'Content-type':'application/json',\n        'X-CSRFToken':csrftoken,\n        'Authorization': `Bearer ${this.accessToken}`\n      },\n    }\n\n    try {\n      const body = {'completed': task.completed, 'title':task.title};\n      const response = await axios.post(url, body, config);\n      await this.fetchTasks();\n    } catch(error) {\n      this.handleReqErrors(error);\n    }\n\n\n      // fetch(url, {\n      //   method:'POST',\n      //   headers:{\n      //     'Content-type':'application/json',\n      //     'X-CSRFToken':csrftoken,\n      //     'Authorization': `Bearer ${this.accessToken}`,\n      //   },\n      //   body:JSON.stringify({'completed': task.completed, 'title':task.title})\n      // }).then(() => {\n      //   this.fetchTasks()\n      // })\n\n  }\n\n\n  render(){\n    var tasks = this.state.todoList\n    var self = this\n    return(\n        <div className=\"container\">\n\n          <div id=\"task-container\">\n              <div  id=\"form-wrapper\">\n                 <form onSubmit={this.handleSubmit}  id=\"form\">\n                    <div className=\"flex-wrapper\">\n                        <div style={{flex: 6}}>\n                            <input onChange={this.handleChange} className=\"form-control\" id=\"title\" value={this.state.activeItem.title} type=\"text\" name=\"title\" placeholder=\"Add task..\" />\n                         </div>\n\n                         <div >\n                            <input id=\"submit\" className=\"btn btn-warning\" type=\"submit\" name=\"Add\" />\n                          </div>\n                      </div>\n                </form>\n             \n              </div>\n\n              <div  id=\"list-wrapper\">         \n                    { tasks != null && tasks.length !== 0 && tasks.map(function(task, index){\n                      return(\n                          <div key={index} className=\"task-wrapper flex-wrapper\">\n\n                            <div onClick={() => self.strikeUnstrike(task)} style={{flex:7}}>\n\n                                {task.completed === false ? (\n                                    <span>{task.title}</span>\n\n                                  ) : (\n\n                                    <strike>{task.title}</strike>\n                                  )}\n  \n                            </div>\n\n                            <div style={{flex:1}}>\n                                <button onClick={() => self.startEdit(task)} className=\"btn btn-sm btn-outline-info\">Edit</button>\n                            </div>\n\n                            <div style={{flex:1}}>\n                                <button onClick={() => self.deleteItem(task)} className=\"btn btn-sm btn-outline-dark delete\">-</button>\n                            </div>\n\n                          </div>\n                        )\n                    })}\n              </div>\n          </div>\n          \n        </div>\n      )\n  }\n}\n\n\n\nexport default App;\n","\nimport React from 'react';\nimport axios from 'axios';\n\nimport App from './App';\nimport './signin.css';\n\n\nexport default class SignIn extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      signedIn: false,\n      emailInput: '', passInput: '', displayLoading: false,\n    }\n    if(process.env.REACT_APP_ENV === 'production'){\n      this.baseUrl = process.env.REACT_APP_PROD_URL;\n    }\n    if(process.env.REACT_APP_ENV === 'development'){\n      this.baseUrl = process.env.REACT_APP_DEV_URL;\n    }\n  }\n\n  componentDidMount() {\n    if (sessionStorage.getItem('authToken') != null) {\n      this.setState({signedIn: true});\n    }\n  }\n\n  login = async () => {\n    const {emailInput, passInput } = this.state;\n    if(emailInput.length === 0 || passInput.length === 0){\n      const msg = 'Please fill in all fields'\n      alert(msg)   \n      return;        \n    }\n    try {\n      this.setState({ displayLoading: true});\n      const data = { email: emailInput, password: passInput };\n      const response = await axios.post(`${this.baseUrl}/auth/login/`, data);\n      sessionStorage.setItem('authToken', response.data.access);\n      sessionStorage.setItem('refreshToken', response.data.refresh);\n      this.setState({ signedIn: true });\n    } catch (error) {\n      if(error.response){\n        if(error.response.status === 401){\n          const msg = 'Invalid Credentials\\nUse email: test@mail.com and password: test123';\n          alert(msg);     \n        }else{\n          alert('Server Error');     \n        }\n      }else{\n        alert('Server Error');         \n      }\n    }\n    this.setState({ displayLoading: false});\n  }\n\n  sessionExpired = () => {\n    this.setState({signedIn: false})\n  }\n\n  renderLogin = () => {\n    const { displayLoading } = this.state;\n    return(\n      <div className=\"signin-body\">\n        <p className=\"c \">Login to access</p>\n\n        <div className=\"signin-form\">\n          <form style={{ border: \"1px solid #ccc\"}}>\n            <div className=\"container\" style={{paddingBottom: '5%'}}>\n\n              <label htmlFor=\"email\"><b>Email</b></label>\n              <input type=\"text\" placeholder=\"Use test@mail.com\" name=\"email\" required \n                onChange={(e) => {this.setState({emailInput: e.target.value})}} value={this.state.emailInput}/>\n\n              <label htmlFor=\"psw\"><b>Password</b></label>\n              <input type=\"password\" placeholder=\"Use test123\" name=\"psw\" required \n                onChange={(e) => {this.setState({passInput: e.target.value})}} value={this.state.passInput}/>\n\n              {!displayLoading && <div className=\"clearfix\">\n                  {/* <button type=\"button\" className=\"cancelbtn\" onClick={this.cancel}>Cancel</button> */}\n                  <button type=\"button\" className=\"signupbtn\" onClick={this.login}>Login</button>\n              </div>}\n\n              { displayLoading && <div className=\"spinner-border\" role=\"status\">\n                <span className=\"sr-only\">Loading...</span>\n              </div> }\n            </div>\n          </form>\n        </div>\n\n      </div>\n    )\n  }\n\n  render() {\n    const { signedIn } = this.state;\n    return(\n      <>\n      { !signedIn && this.renderLogin() }\n      { signedIn  && <App sessionExpired={this.sessionExpired}/> }\n      </>\n    );\n  }\n\n}\n\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport SignIn from './SignIn';\nimport * as serviceWorker from './serviceWorker';\n\n\nReactDOM.render( <SignIn />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}